openapi: 3.0.3
info:
  title: Restaurant Platform API
  description: |
    A comprehensive REST API for a restaurant platform that supports both customers and restaurant owners.
    Built with Clean Architecture principles using Node.js, TypeScript, Express, and PostgreSQL.
    
    ## Features
    - User authentication and authorization with JWT tokens
    - Support for two user types: Customers and Restaurant Owners
    - Secure password hashing with bcrypt
    - Input validation with express-validator
    - PostgreSQL database with proper constraints
    - Clean Architecture with dependency injection
    
    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <your_jwt_token>
    ```
  version: 1.0.0
  contact:
    name: API Support
    email: support@restaurantplatform.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.restaurantplatform.com
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health Check
      summary: Health check endpoint
      description: Check if the API server is running and healthy
      operationId: healthCheck
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-12-03T10:30:00.000Z"
                  uptime:
                    type: number
                    description: Server uptime in seconds
                    example: 3600.5

  /api/auth/register/customer:
    post:
      tags:
        - Authentication
      summary: Register a new customer
      description: Create a new customer account with email, mobile number, and password
      operationId: registerCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCustomerRequest'
            examples:
              validCustomer:
                summary: Valid customer registration
                value:
                  name: "Ahmed Mohamed"
                  email: "ahmed@example.com"
                  mobileNumber: "01234567890"
                  password: "SecurePass123"
      responses:
        '201':
          description: Customer registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Customer registered successfully"
                  data:
                    $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Bad request - Validation errors or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validationError:
                  summary: Validation errors
                  value:
                    success: false
                    message: "Validation failed"
                    errors:
                      - field: "email"
                        message: "Invalid email format"
                        value: "invalid-email"
                      - field: "password"
                        message: "Password must contain at least one lowercase letter, one uppercase letter, and one number"
                userExists:
                  summary: User already exists
                  value:
                    success: false
                    message: "User already exists with this mobile number"

  /api/auth/register/restaurant-owner:
    post:
      tags:
        - Authentication
      summary: Register a new restaurant owner
      description: Create a new restaurant owner account with restaurant details
      operationId: registerRestaurantOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRestaurantOwnerRequest'
            examples:
              validOwner:
                summary: Valid restaurant owner registration
                value:
                  restaurantName: "Delicious Bites Restaurant"
                  organizationNumber: "ORG123456789"
                  mobileNumber: "01987654321"
                  password: "RestaurantPass123"
      responses:
        '201':
          description: Restaurant owner registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Restaurant owner registered successfully"
                  data:
                    $ref: '#/components/schemas/RestaurantOwnerResponse'
        '400':
          description: Bad request - Validation errors or organization already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validationError:
                  summary: Validation errors
                  value:
                    success: false
                    message: "Validation failed"
                    errors:
                      - field: "organizationNumber"
                        message: "Organization number must contain only uppercase letters and numbers"
                        value: "org123"
                orgExists:
                  summary: Organization already exists
                  value:
                    success: false
                    message: "Restaurant with this organization number already exists"

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: |
        Authenticate a user (customer or restaurant owner) using email/mobile number and password.
        Returns JWT tokens for subsequent API calls.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              loginWithEmail:
                summary: Login with email
                value:
                  email: "ahmed@example.com"
                  password: "SecurePass123"
              loginWithMobile:
                summary: Login with mobile number
                value:
                  mobileNumber: "01234567890"
                  password: "SecurePass123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized - Invalid credentials or account deactivated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Invalid credentials
                  value:
                    success: false
                    message: "Invalid credentials"
                accountDeactivated:
                  summary: Account deactivated
                  value:
                    success: false
                    message: "Account is deactivated"
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Request Schemas
    RegisterCustomerRequest:
      type: object
      required:
        - name
        - email
        - mobileNumber
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          pattern: '^[a-zA-Z\s]+$'
          description: Customer's full name (letters and spaces only)
          example: "Ahmed Mohamed"
        email:
          type: string
          format: email
          maxLength: 255
          description: Customer's email address
          example: "ahmed@example.com"
        mobileNumber:
          type: string
          pattern: '^[0-9]{10,15}$'
          description: Customer's mobile number (10-15 digits)
          example: "01234567890"
        password:
          type: string
          minLength: 6
          maxLength: 100
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
          description: Password (must contain lowercase, uppercase, and number)
          example: "SecurePass123"

    RegisterRestaurantOwnerRequest:
      type: object
      required:
        - restaurantName
        - organizationNumber
        - email 
        - mobileNumber
        - password
      properties:
        restaurantName:
          type: string
          minLength: 2
          maxLength: 255
          description: Name of the restaurant
          example: "Delicious Bites Restaurant"
        organizationNumber:
          type: string
          minLength: 5
          maxLength: 50
          pattern: '^[A-Z0-9]+$'
          description: Organization registration number (uppercase letters and numbers)
          example: "ORG123456789"
        mobileNumber:
          type: string
          pattern: '^[0-9]{10,15}$'
          description: Restaurant owner's mobile number (10-15 digits)
          example: "01987654321"
        password:
          type: string
          minLength: 6
          maxLength: 100
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
          description: Password (must contain lowercase, uppercase, and number)
          example: "RestaurantPass123"

    LoginRequest:
      type: object
      required:
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address (for customers)
          example: "ahmed@example.com"
        mobileNumber:
          type: string
          pattern: '^[0-9]{10,15}$'
          description: User's mobile number (10-15 digits)
          example: "01234567890"
        password:
          type: string
          minLength: 1
          description: User's password
          example: "SecurePass123"
      description: Either email or mobileNumber must be provided

    # Response Schemas
    CustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique customer identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          description: Customer's full name
          example: "Ahmed Mohamed"
        email:
          type: string
          format: email
          description: Customer's email address
          example: "ahmed@example.com"
        mobileNumber:
          type: string
          description: Customer's mobile number
          example: "01234567890"
        userType:
          type: string
          enum: ["customer"]
          description: User type
          example: "customer"
        isActive:
          type: boolean
          description: Account status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-12-03T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Account last update timestamp
          example: "2024-12-03T10:30:00.000Z"

    RestaurantOwnerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique restaurant owner identifier
          example: "550e8400-e29b-41d4-a716-446655440001"
        restaurantName:
          type: string
          description: Name of the restaurant
          example: "Delicious Bites Restaurant"
        organizationNumber:
          type: string
          description: Organization registration number
          example: "ORG123456789"
        mobileNumber:
          type: string
          description: Restaurant owner's mobile number
          example: "01987654321"
        userType:
          type: string
          enum: ["restaurant_owner"]
          description: User type
          example: "restaurant_owner"
        isActive:
          type: boolean
          description: Account status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-12-03T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Account last update timestamp
          example: "2024-12-03T10:30:00.000Z"

    LoginResponse:
      type: object
      properties:
        user:
          oneOf:
            - $ref: '#/components/schemas/CustomerResponse'
            - $ref: '#/components/schemas/RestaurantOwnerResponse'
          description: User information (without password)
        authToken:
          $ref: '#/components/schemas/AuthToken'

    AuthToken:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token for API authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: JWT refresh token for token renewal
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: number
          description: Access token expiration time in seconds
          example: 86400

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "Validation failed"
        errors:
          type: array
          description: Detailed validation errors (when applicable)
          items:
            type: object
            properties:
              field:
                type: string
                description: Field name that caused the error
                example: "email"
              message:
                type: string
                description: Error message for the field
                example: "Invalid email format"
              value:
                type: string
                description: Invalid value that was provided
                example: "invalid-email"

    ValidationError:
      type: object
      properties:
        field:
          type: string
          description: Field name that failed validation
          example: "email"
        message:
          type: string
          description: Validation error message
          example: "Invalid email format"
        value:
          description: The invalid value that was provided
          example: "invalid-email"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT authentication. Include the token in the Authorization header:
        `Authorization: Bearer <your_jwt_token>`

security:
  - BearerAuth: []

tags:
  - name: Health Check
    description: Server health monitoring endpoints
  - name: Authentication
    description: User authentication and registration endpoints

externalDocs:
  description: Find out more about this API
  url: https://github.com/yourorg/restaurant-platform-api