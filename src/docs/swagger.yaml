openapi: 3.0.3
info:
  title: Yum-Gott Platform API
  description: API for the Yum-Gott platform, supporting customer and restaurant owner authentication, profile management, and product management.
  version: 1.0.0

paths:
  /health:
    get:
      tags:
        - Health Check
      summary: Health check endpoint
      description: Check if the API server is running and healthy
      operationId: checkHealth
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-06-16T14:36:00Z"
                  uptime:
                    type: number
                    description: Server uptime in seconds
                    example: 3600.5
  /api/auth/register/customer:
    post:
      tags:
        - Authentication
      summary: Register a new customer
      description: Initiates customer registration by storing details in pending_users and sending a verification email.
      operationId: registerCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCustomerRequest'
            examples:
              validCustomer:
                summary: Valid customer registration
                value:
                  name: "Ahmed Mohamed"
                  email: "ahmed@example.com"
                  mobileNumber: "01234567890"
                  password: "SecurePass123"
      responses:
        '201':
          description: Customer registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Customer registration initiated. Please check your email for verification link."
        '400':
          $ref: '#/components/responses/BadRequestError'
  /api/auth/register/restaurant-owner:
    post:
      tags:
        - Authentication
      summary: Register a new restaurant owner
      description: Initiates restaurant owner registration by storing details in pending_users and sending a verification email.
      operationId: registerRestaurantOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRestaurantOwnerRequest'
            examples:
              validOwner:
                summary: Valid restaurant owner registration
                value:
                  restaurantName: "Tasty Bites"
                  organizationNumber: "ORG123456"
                  email: "owner@example.com"
                  mobileNumber: "09876543210"
                  password: "SecurePass123"
      responses:
        '201':
          description: Restaurant owner registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Restaurant owner registration initiated. Please check your email for verification link."
        '400':
          $ref: '#/components/responses/BadRequestError'
  /api/auth/verify:
    get:
      tags:
        - Authentication
      summary: Verify email address
      description: Verifies a user's email using a token sent in the verification email, moving the user from pending_users to the customers or restaurant_owners table.
      operationId: verifyEmail
      parameters:
        - in: query
          name: token
          schema:
            type: string
            format: uuid
          required: true
          description: Verification token sent to the user's email
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email verified successfully. You can now login."
                  data:
                    type: object
                    properties:
                      user:
                        oneOf:
                          - $ref: '#/components/schemas/CustomerResponse'
                          - $ref: '#/components/schemas/RestaurantOwnerResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /api/auth/login/customer:
    post:
      tags:
        - Authentication
      summary: Customer login
      description: Authenticate a customer using email or mobile number and password. Returns JWT tokens as HTTP-only cookies.
      operationId: loginCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              loginWithEmail:
                summary: Login with email
                value:
                  email: "ahmed@example.com"
                  password: "SecurePass123"
      responses:
        '200':
          description: Customer login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Customer login successful"
                  data:
                    $ref: '#/components/schemas/LoginResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
  /api/auth/login/restaurant-owner:
    post:
      tags:
        - Authentication
      summary: Restaurant owner login
      description: Authenticate a restaurant owner using email or mobile number and password. Returns JWT tokens as HTTP-only cookies.
      operationId: loginRestaurantOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              loginWithEmail:
                summary: Login with email
                value:
                  email: "owner@example.com"
                  password: "SecurePass123"
      responses:
        '200':
          description: Restaurant owner login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Restaurant owner login successful"
                  data:
                    $ref: '#/components/schemas/LoginResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
  /api/auth/profile/restaurant-owner:
    get:
      tags:
        - Authentication
      summary: Get restaurant owner profile
      description: Retrieve the restaurant name and profile image URL for the authenticated restaurant owner
      operationId: getRestaurantOwnerProfile
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Restaurant owner profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      restaurantName:
                        type: string
                        example: "Gourmet Delight"
                      profileImageUrl:
                        type: string
                        nullable: true
                        example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/restaurant_owner/123.jpg"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/auth/profile/image:
    post:
      tags:
        - Authentication
      summary: Upload profile image
      description: Allows authenticated customers or restaurant owners to upload a profile image, stored in AWS S3.
      operationId: uploadProfileImage
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - profileImage
              properties:
                profileImage:
                  type: string
                  format: binary
                  description: Profile image file (JPEG, PNG, or GIF, max 5MB)
      responses:
        '200':
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile image uploaded successfully"
                  data:
                    type: object
                    properties:
                      profileImageUrl:
                        type: string
                        example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/customer/123e4567-e89b-12d3-a456-426614174000.jpg"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/auth/location/restaurant:
    post:
      tags:
        - Authentication
      summary: Update restaurant location
      description: Updates the restaurant's address and GPS coordinates for an authenticated restaurant owner.
      operationId: updateRestaurantLocation
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRestaurantLocationRequest'
            examples:
              validLocation:
                summary: Valid location update
                value:
                  address: "123 Main St, City"
                  latitude: 40.7128
                  longitude: -74.0060
      responses:
        '200':
          description: Restaurant location updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Restaurant location updated successfully"
                  data:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "123 Main St, City"
                      latitude:
                        type: number
                        example: 40.7128
                      longitude:
                        type: number
                        example: -74.0060
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/products:
    post:
      tags:
        - Products
      summary: Create a new product
      description: Allows restaurant owners to create a new product with an image upload. The restaurant owner ID is derived from the authenticated user's access token.
      operationId: createProduct
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product created successfully"
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      description: Retrieves a product by its ID
      operationId: getProduct
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Product ID
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Products
      summary: Update a product
      description: Allows restaurant owners to update an existing product
      operationId: updateProduct
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product updated successfully"
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Allows restaurant owners to delete a product
      operationId: deleteProduct
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Product ID
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/products/restaurant:
    get:
      tags:
        - Products
      summary: Get all products for a restaurant
      description: Retrieves all products for the authenticated restaurant owner
      operationId: getProductsByRestaurant
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/products/{productId}/options:
    post:
      tags:
        - Products_option
      summary: Create a product option
      description: Allows restaurant owners to create a new option for a product (e.g., "Cheese", "Spiciness").
      operationId: createProductOption
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: string
            format: uuid
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the option
                  example: "Cheese"
      responses:
        '201':
          description: Product option created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product option created successfully"
                  data:
                    $ref: '#/components/schemas/ProductOption'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    get:
      tags:
        - Products_option
      summary: Get all options for a product
      description: Retrieves all options and their values for a specific product
      operationId: getProductOptions
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: string
            format: uuid
          required: true
          description: Product ID
      responses:
        '200':
          description: Product options retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product options retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductOptionWithValues'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/products/options/{optionId}/values:
    post:
      tags:
        - Products_option
      summary: Create a product option value
      description: Allows restaurant owners to add a value to an existing product option (e.g., "1 slice" for "Cheese").
      operationId: createProductOptionValue
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: optionId
          schema:
            type: string
            format: uuid
          required: true
          description: Option ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the option value
                  example: "1 slice"
                additionalPrice:
                  type: number
                  format: float
                  description: Optional additional price for the option value
                  example: 1.50
      responses:
        '201':
          description: Product option value created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product option value created successfully"
                  data:
                    $ref: '#/components/schemas/ProductOptionValue'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/products/options/{optionId}:
    delete:
      tags:
        - Products_option
      summary: Delete a product option
      description: Allows restaurant owners to delete a product option and its associated values
      operationId: deleteProductOption
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: optionId
          schema:
            type: string
            format: uuid
          required: true
          description: Option ID
      responses:
        '200':
          description: Product option deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product option deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/products/option-values/{valueId}:
    delete:
      tags:
        - Products_option
      summary: Delete a product option value
      description: Allows restaurant owners to delete a specific product option value
      operationId: deleteProductOptionValue
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: valueId
          schema:
            type: string
            format: uuid
          required: true
          description: Option value ID
      responses:
        '200':
          description: Product option value deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product option value deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
      description: JWT access token stored in an HTTP-only cookie
  responses:
    BadRequestError:
      description: Bad request - Validation errors or invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validationError:
              summary: Validation errors
              value:
                success: false
                message: "Validation failed"
                errors:
                  - field: "email"
                    message: "Invalid email format"
                    value: "invalid-email"
            invalidFileType:
              summary: Invalid file type
              value:
                success: false
                message: "Only JPEG, PNG, and GIF images are allowed"
    UnauthorizedError:
      description: Unauthorized - Authentication credentials are missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorized:
              summary: Unauthorized
              value:
                success: false
                message: "Unauthorized: Please log in"
    ForbiddenError:
      description: Forbidden - User does not have sufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            forbidden:
              summary: Forbidden
              value:
                success: false
                message: "Forbidden: Only restaurant owners can access this endpoint"
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            notFound:
              summary: Resource not found
              value:
                success: false
                message: "Product not found"
    TooManyRequestsError:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            rateLimit:
              summary: Rate limit exceeded
              value:
                success: false
                message: "Too many login attempts. Please try again later."
  schemas:
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred"
        errors:
          type: array
          nullable: true
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Invalid email format"
              value:
                type: string
                example: "invalid-email"
    LoginRequest:
      type: object
      required:
        - password
      oneOf:
        - required: [email]
        - required: [mobileNumber]
      properties:
        email:
          type: string
          format: email
          example: "ahmed@example.com"
        mobileNumber:
          type: string
          pattern: '^[0-9]{10,15}$'
          example: "01234567890"
        password:
          type: string
          minLength: 6
          example: "SecurePass123"
    LoginResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "ahmed@example.com"
        mobileNumber:
          type: string
          example: "01234567890"
        userType:
          type: string
          enum: ["customer", "restaurant_owner"]
          example: "customer"
    RegisterCustomerRequest:
      type: object
      required:
        - name
        - email
        - mobileNumber
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          pattern: '^[a-zA-Z\s]+$'
          example: "Ahmed Mohamed"
        email:
          type: string
          format: email
          maxLength: 255
          example: "ahmed@example.com"
        mobileNumber:
          type: string
          pattern: '^[0-9]{10,15}$'
          example: "01234567890"
        password:
          type: string
          minLength: 6
          maxLength: 100
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
          example: "SecurePass123"
    RegisterRestaurantOwnerRequest:
      type: object
      required:
        - restaurantName
        - organizationNumber
        - email
        - mobileNumber
        - password
      properties:
        restaurantName:
          type: string
          minLength: 2
          maxLength: 255
          example: "Tasty Bites"
        organizationNumber:
          type: string
          minLength: 5
          maxLength: 50
          pattern: '^[A-Z0-9]+$'
          example: "ORG123456"
        email:
          type: string
          format: email
          maxLength: 255
          example: "owner@example.com"
        mobileNumber:
          type: string
          pattern: '^[0-9]{10,15}$'
          example: "09876543210"
        password:
          type: string
          minLength: 6
          maxLength: 100
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
          example: "SecurePass123"
    UpdateRestaurantLocationRequest:
      type: object
      required:
        - address
        - latitude
        - longitude
      properties:
        address:
          type: string
          maxLength: 255
          example: "123 Main St, City"
        latitude:
          type: number
          minimum: -90
          maximum: 90
          example: 40.7128
        longitude:
          type: number
          minimum: -180
          maximum: 180
          example: -74.0060
    CustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Ahmed Mohamed"
        email:
          type: string
          format: email
          example: "ahmed@example.com"
        mobileNumber:
          type: string
          example: "01234567890"
        userType:
          type: string
          enum: ["customer"]
          example: "customer"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-06-16T14:36:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-06-16T14:36:00Z"
        profileImageUrl:
          type: string
          nullable: true
          example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/customer/123e4567-e89b-12d3-a456-426614174000.jpg"
    RestaurantOwnerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "7db9be8e-72d8-49dd-95e4-bb5419667984"
        restaurantName:
          type: string
          example: "Tasty Bites"
        organizationNumber:
          type: string
          example: "ORG123456"
        email:
          type: string
          format: email
          example: "owner@example.com"
        mobileNumber:
          type: string
          example: "09876543210"
        userType:
          type: string
          enum: ["restaurant_owner"]
          example: "restaurant_owner"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-06-16T14:36:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-06-16T14:36:00Z"
        profileImageUrl:
          type: string
          nullable: true
          example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/restaurant_owner/7db9be8e-72d8-49dd-a456-426614174000.jpg"
        address:
          type: string
          nullable: true
          example: "123 Main St, City"
        latitude:
          type: number
          nullable: true
          example: 40.7128
        longitude:
          type: number
          nullable: true
          example: -74.0060
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-1234-a456-426614174000"
        category:
          type: string
          example: "Main Course"
        productName:
          type: string
          example: "Chicken Alfredo"
        description:
          type: string
          example: "Creamy pasta with grilled chicken"
        price:
          type: number
          format: float
          example: 15.99
        discount:
          type: number
          format: float
          nullable: true
          example: 10
        addSize:
          type: string
          enum:
            - Small
            - Medium
            - Large
          nullable: true
          example: "Medium"
        imageUrl:
          type: string
          nullable: true
          example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/product/123e4567-e89b-1234-a456-426614174000.jpg"
        restaurantOwnerId:
          type: string
          format: uuid
          example: "7db9be8e-72d8-1234-a456-426614174000"
        createdAt:
          type: string
          format: date-time
          example: "2025-06-16T14:36:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-06-16T14:36:00Z"
    CreateProductRequest:
      type: object
      required:
        - category
        - productName
        - description
        - price
        - image
      properties:
        category:
          type: string
          description: The category of the product
          example: "Pizza"
        productName:
          type: string
          description: The name of the product
          example: "Margherita Pizza"
        description:
          type: string
          description: A description of the product
          example: "Classic pizza with tomato sauce and mozzarella"
        price:
          type: number
          format: float
          description: The price of the product
          example: 12.99
        discount:
          type: number
          format: float
          description: Optional discount amount
          example: 1.50
        addSize:
          type: string
          enum: [Small, Medium, Large]
          description: Optional size option
          example: "Medium"
        image:
          type: string
          format: binary
          description: |
            Product image file (required)
            - Max size: 5MB
            - Allowed formats: JPEG, PNG, GIF
            - Image will be automatically converted to JPG format
    UpdateProductRequest:
      type: object
      properties:
        category:
          type: string
          maxLength: 100
          example: "Main Course"
        productName:
          type: string
          maxLength: 255
          example: "Chicken Alfredo"
        description:
          type: string
          example: "Creamy pasta with grilled chicken"
        price:
          type: number
          format: float
          minimum: 0
          example: 15.99
        discount:
          type: number
          format: float
          minimum: 0
          maximum: 100
          nullable: true
          example: 10
        addSize:
          type: string
          enum:
            - Small
            - Medium
            - Large
          nullable: true
          example: "Medium"
        image:
          type: string
          format: binary
          description: Product image file (JPEG, PNG, or GIF, max 5MB)
    ProductOption:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        productId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        name:
          type: string
          example: "Cheese"
        createdAt:
          type: string
          format: date-time
          example: "2025-06-18T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-06-18T12:00:00Z"
    ProductOptionValue:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174002"
        optionId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "1 slice"
        additionalPrice:
          type: number
          format: float
          nullable: true
          example: 1.50
        createdAt:
          type: string
          format: date-time
          example: "2025-06-18T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-06-18T12:00:00Z"
    ProductOptionWithValues:
      allOf:
        - $ref: '#/components/schemas/ProductOption'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/ProductOptionValue'

tags:
  - name: Health Check
    description: Server health monitoring endpoints
  - name: Authentication
    description: User registration, login, and profile management
  - name: Products
    description: Product management for restaurant owners
  - name: Products_option
    description: Product_option management for product